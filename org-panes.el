(defvar all)
(defvar contents)
(defvar overview)

(defun org-make-panes ()
  (interactive)
  (delete-other-windows)
  (let* ((size (window-body-width)))
    (setq all (buffer-name)
          contents (concat all ":CONTENTS")
          overview (concat all ":OVERVIEW"))
    (setq org-panes-min (window-start)
          org-panes-max (window-end))
    (save-excursion
      (goto-char org-panes-min)
      (beginning-of-line)
      (forward-line (window-body-height))
      (setq org-panes-max (1- (point))))
    (split-window-right (/ size -2))
    (split-window-right (/ (* size 2) -7))
    (other-window -1)
    (clone-indirect-buffer contents t)
    (org-content)
    (org-panes--make-overlay)
    (clone-indirect-buffer overview t)
    (org-overview)
    (org-panes--make-overlay)
    (other-window -1)
    (show-all)))

(defun org-panes-move-point ()
  (when (or (equal (buffer-name) all)
            (equal (buffer-name) contents)
            (equal (buffer-name) overview))
    (let ((pos (point))
          (all (get-buffer-window all))
          (overview (get-buffer-window overview))
          (contents (get-buffer-window contents)))
      (save-excursion (move-beginning-of-line nil)
                      (setq pos (point)))
      (when (and all (not (equal all (get-buffer-window))))
        (progn
          (with-selected-window all
            (goto-char pos)
            (move-beginning-of-line nil))))
      (when (and overview (not (equal overview (get-buffer-window))))
        (with-selected-window overview
          (goto-char pos)
          (move-beginning-of-line nil)))
      (when (and contents (not (equal contents (get-buffer-window))))
        (with-selected-window contents
          (goto-char pos)
          (move-beginning-of-line nil)))
      (redisplay)
      (when all (with-selected-window all
                  (setq org-panes-min (window-start))
                  (save-excursion
                    (goto-char org-panes-min)
                    (beginning-of-line)
                    (forward-line (window-body-height))
                    (setq org-panes-max (1- (point))))))
      (when contents (with-selected-window contents
                       (org-panes--remove-overlay)
                       (org-panes--make-overlay)))
      (when overview (with-selected-window overview
                       (org-panes--remove-overlay)
                       (org-panes--make-overlay))))))

(add-hook 'post-command-hook 'org-panes-move-point)

(defun org-panes--make-overlay ()
  (save-excursion
    (let (a b)
      (setq a org-panes-min)
      (setq b org-panes-max)
      (let ((ov (make-overlay a b)))
        (overlay-put ov 'category 'org-pane-highlight)
        (overlay-put ov 'face '(:background "#222"))))))

(defun org-panes--remove-overlay ()
  (dolist (ov (org-panes--active-overlays))
    (delete-overlay ov)))

(defun org-panes--active-overlays ()
  (let ((del-from (point-min))
        (del-to (point-max)))
    (delq nil (mapcar (lambda (ov)
                        (and (eq (overlay-get ov 'category)
                                 'org-pane-highlight)
                             ov))
                      (overlays-in del-from del-to)))))
